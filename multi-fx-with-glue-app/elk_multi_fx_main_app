#!/usr/bin/env python3
'''elk-fx-main : glue app example for multi fx '''

__copyright__   = 'Copyright (C) Elk 2019 '

import sys
import os
import time
import queue
import json

import liblo

from elkpy import sushicontroller as sc
from elkpy import sushiprocessor as sp

###############
#  Constants  #
###############

SUSHI_ADDRESS = ('localhost:51051')

SENSEI_TO_BRIDGE_OSC_PORT = 23023
BRIDGE_TO_SENSEI_PORT = 23024

SENSEI_ADDRESS = ('localhost', BRIDGE_TO_SENSEI_PORT)

# Sensor input path : (tuple of (processor, parameter, (range_min, range_max), led ring id)
SENSEI_ENCODER_MAP = {
    '/sensors/analog/rotary_1' :   ( 'drive',   'Drive   ', (0.1, 1.0), 2 ),
    '/sensors/analog/rotary_2' :   ( 'flanger', 'Rate', (0.0, 1.0), 3 ),
    '/sensors/analog/rotary_3' :   ( 'filter',  'Freq', (0.0, 0.9), 4 ),
    '/sensors/analog/rotary_4' :   ( 'delay',   'L Delay ', (0.1, 0.8), 5 )
}

SENSEI_BUTTON_MAP = {
    '/sensors/digital/button_1' : 0,
    '/sensors/digital/button_2' : 1,
    '/sensors/digital/button_3' : 2,
    '/sensors/digital/button_4' : 3
}

SENSEI_PROGRAM_SELECT = "/sensors/analog/program"

SUSHI_PROCESSORS = ['main','drive', 'flanger', 'filter', 'delay']

SUSHI_STARTUP_MESSAGES = [
    ('main', 'gain', -10)
]

# A list of programs for each processor. Unfortunately mdaThruZero is the only
# plugin that actually implements programs
SUSHI_PROGRAMS = [
    {'drive':0, 'flanger':0, 'filter':0, 'delay':0},
    {'drive':1, 'flanger':1, 'filter':1, 'delay':1},
    {'drive':2, 'flanger':2, 'filter':2, 'delay':2},
    {'drive':3, 'flanger':3, 'filter':3, 'delay':3}
]

# Get protofile to generate grpc library
proto_file = os.environ.get('SUSHI_GRPC_ELKPY_PROTO')
if proto_file is None:
    print("Environment variable SUSHI_GRPC_ELKPY_PROTO not defined, set it to point the .proto definition")
    sys.exit(-1)

#########################
#  Module functions
#########################

# When using hardware controllers and Sensei, these functions would call Sensei over OSC to set 
# Leds, encoders, etc. 
def set_led_output(led_id, value):
    osc_msg = liblo.Message('/sensors/digital/led_' + str(led_id + 1))
    osc_msg.add(('f', float(value)))
    liblo.send(SENSEI_ADDRESS, osc_msg)

def set_knob_output(path, value):
    osc_msg = liblo.Message(path)
    osc_msg.add(('f', float(value)))
    liblo.send(SENSEI_ADDRESS, osc_msg)


################
#  Classes     #
################

# Bridge/Glue object that manages duplex communication between Sushi and the controlling interface (which
# could be a hw controller, Open stage control, TouchOSC or similar) And encapsulates simple logic
# around programs, state leds and similiar.
class ElkBridge(object):
    def __init__(self):
        self._server = liblo.ServerThread(SENSEI_TO_BRIDGE_OSC_PORT)
        self._sushi = sc.SushiController(SUSHI_ADDRESS, proto_file)
        self._processors = self._create_processors(SUSHI_PROCESSORS)
        self.register_callbacks()
        self._send_initial_sushi_configuration()

    def _create_processors(self, list_of_processors):
        processors = {}
        for processor in list_of_processors:
            processors[processor] = sp.SushiProcessor(processor,self._sushi)
        return processors

    def register_callbacks(self):
        for path, unused in SENSEI_ENCODER_MAP.items():
            self._server.add_method(path, 'f', self._handle_knobs)

        for path, unused in (SENSEI_BUTTON_MAP).items():
            self._server.add_method(path, 'f', self._handle_buttons)

        self._server.add_method(SENSEI_PROGRAM_SELECT, 'i', self._handle_programs)

        self._server.add_method(None, None, self._unhandled_msg_callback)

    def _unhandled_msg_callback(self, path, args, types, src):
        print('Unknown message %s from %s' % (path, src.url))

    def start(self):
        self._server.start()

    # Query Sushi for parameter values and update the knob positions accordingly
    def _refresh_knobs(self):
        for path, data in SENSEI_ENCODER_MAP.items():
            processor = data[0]
            parameter = data[1]    
            value = self._processors[processor].get_parameter_value(parameter)
            range_min, range_max = data[2]
            out_value = (value - range_min) / (range_max - range_min)
            set_knob_output(path, out_value)

    def _send_initial_sushi_configuration(self):
        for data in SUSHI_STARTUP_MESSAGES:
            self._processors[data[0]].set_parameter_value(data[1], data[2])

    # Callback for parameter knobs
    def _handle_knobs(self, path, args):
        value = args[0]
        data = SENSEI_ENCODER_MAP[path]
        processor = data[0]
        parameter = data[1]
        range_min, range_max = data[2]
        out_value = range_min + (range_max - range_min) * value
        self._processors[processor].set_parameter_value(parameter, out_value)

    # Callback for enabled/disabled buttons
    def _handle_buttons(self, path, args):
        enabled_state = True if args[0] > 0.5 else False
        button_id = int(path.split('/')[-1][-1]) - 1
        processor = SUSHI_PROCESSORS[button_id]
        self._processors[processor].set_bypass_state(not enabled_state)
        set_led_output(button_id, enabled_state)

    # Callback for program changes
    def _handle_programs(self, path, args):
        program = int(args[0])
        multi_program = SUSHI_PROGRAMS[program]
        for processor, program in multi_program.items():
            self._processors[processor].set_program(program)

        self._refresh_knobs()


if __name__ == '__main__':
    rack_bridge = ElkBridge()
    rack_bridge.start()

    while True:
        # App is callback driven, so do nothing here, though this loop can be used to do periodic
        # updates, flash leds, etc.
        time.sleep(0.1)

